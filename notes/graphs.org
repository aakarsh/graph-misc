* Algorithms on Graphs
  
** Week 1
*** Connectivity
*** Pre and Post Orderings
    
** Week 2
*** Directed Graphs
*** Topological Sorting
*** Strongly Connected Components
    
** Week 3
*** Breadth First Search
*** Proof of Correctness
*** Shortest Part Trees
*** Reconstructing Shortest Paths
    
** Week 4
*** Shortest Path
*** Dijsktra's Algorithm
*** Bellman Ford's algorithm
*** Negative Cycles

** Week 5
*** Minimum Spanning Tree <<mst>>
    
A [[tree]] which spans every vertex $V$ in graph $G$. Subset of edges $E
\in G(V,E)$ such that $\sum w(e) \forall e \in E$ is minimum.

**** <<tree>> Tree

A tree is an undirected graph which is connected and acyclic.

***** Tree Properties
      
      1. A tree with $n$ nodes will have $n-1$ endges.
      2. A connected,undirected graph $G(V,E)$ with $|V| -1 $ edges is by definition a tree.
      3. An undirected graph with a *unique path* between any two pairs of vertices is by definition a tree.

*** Greedy Algorithms
**** Kruskal's Algorithm Summary
     1. Repeatedly add the next lightest edge of G(V,E) such that adding the edge does not produce a cycle
     2. Terminate when no more edges can be added to the graph $G$
      
**** Prim's Algorithms Summary
     
     1. Repeatedly add the new vertex to the *current tree* by the next light edge.
     2. Terminate when all vertices have been added  to the *current tree*

*** Cut Property
    
    Let $X \in E$ be a part of a *[[mst]] minimum spaning tree* of $G(V,E)$ such that $S \in V$ and there is
    no edge between $S$ and $V-S$. and $e \in E$ be the lightest edge between $S$ and $V-S$ then 
    $e$ this lightest edge is part of the *[[mst]] minimum spanning tree*

**** Proof:
         1. Consider disjoint $S$ and $V-S$ set of vertices.
         2. Let $e$ be the minum vertex between all vertices between $S$ and $V-S$ such that $e$ is not in the MST.
         3. Let $e'$ be an edge in the minimum spanning tree containing $S$ and $V-S$
         4. Since MST is a tree adding an edge  $e$ will create a cycle containing the edges $e$ and $e'$
         5. Deleting any edge in the cycle will leave the graph connected.
         6. Since  $w(e) < w(e')$  removing edge $e'$ and adding keeping the edge $e$ will produce a tree 
            with weight smaller than MST.
         7. Thus by contradiction $e$ must be in the MST. 
            
*** Kruskal's Algorithm
    
    1. 
    
*** Prim's Algorithm

    
** Week 6
   
*** Bidirectional Dijsktra
    
*** A* Algorithm
    
*** Contraction Algorithms
    
